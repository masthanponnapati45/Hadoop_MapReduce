package word;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

	public class PerDocumentMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
		
		   
		   public  PerDocumentMapper(){
		    	
		    }
		    @Override
		    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
		
		        IntWritable writableCount = new IntWritable();
		
		        Text text = new Text();
		
		        Map<String,Integer> tokenMap = new HashMap<String, Integer>();
		
		      StringTokenizer tokenizer = new StringTokenizer(value.toString());
		
		 
		
		        while(tokenizer.hasMoreElements()){
		
		            String token = tokenizer.nextToken();
		
		            Integer count = tokenMap.get(token);
		
		            if(count == null) count = new Integer(0);
		
		            count+=1;
		
		            tokenMap.put(token,count);
		
		        }
		
		 
		
		        Set<String> keys = tokenMap.keySet();
		
		        for (String s : keys) {
		
		             text.set(s);
		
		             writableCount.set(tokenMap.get(s));
	
		             context.write(text,writableCount);
	
		        }
		
		    }
		
		}


	public class TokenCountReducer extends Reducer<Text,IntWritable,Text,IntWritable>{
		
		    @Override
		
		    protected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
		
		        int count = 0;
		
		        for (IntWritable value : values) {
		
		              count+= value.get();
		
		        }
		
		        context.write(key,new IntWritable(count));
		
		    }
		
		}


  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "WordCount");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(PerDocumentMapper.class);
    job.setCombinerClass(TokenCountReducer.class);
    job.setReducerClass(TokenCountReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
